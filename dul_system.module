<?php

include_once 'dul_system.forms.inc';

/**
 * Implements hook_menu()
 */
function dul_system_menu() {
	return array(
		'admin/config/library' => array(
			'title' => 'Library Website Settings',
			'description' => 'Adjust settings for this site within the Duke University Library Website platform',
			'position' => 'right',
			'weight' => -5,
			'page callback' => 'system_admin_menu_block_page',
			'access arguments' => array('administer site configuration'),
			'file' => 'system.admin.inc',
			'file path' => drupal_get_path('module', 'system'),
		),
		'admin/config/library/address' => array(
			'title' => 'Library Address',
			'description' => 'Set the address used in the footer of the website.',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('dul_system_address_settings'),
			'access arguments' => array('administer site configuration'),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'dul_system.admin.inc',
		),
		'admin/config/library/feeds' => array(
			'title' => 'Miscellaneous Feed URLs',
			'description' => 'Set the URLs for various feeds (e.g., Staff Directory)',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('dul_system_feed_settings'),
			'access arguments' => array('administer site configuration'),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'dul_system.admin.inc',
		),
		'about/staff' => array(
			'page callback' => 'dul_system_staff_directory',
			'title' => 'Duke University Libraries Staff Directory',
			'file' => 'dul_system.staff.inc',
			'access callback' => TRUE,
		),
		'about/staff/dept/%dul_system_dept' => array(
			'page callback' => 'dul_system_staff_page',
			'page arguments' => array(3),
			'file' => 'dul_system.staff.inc',
			'access callback' => TRUE,
		),
		'error/404' => array(
			'page callback' => 'dul_system_404',
			'access callback' => TRUE,
		),
		'whoops' => array(
			'page callback' => 'dul_system_404',
			'access callback' => TRUE,
		),
		'error/403' => array(
			'page callback' => 'dul_system_403',
			'access callback' => TRUE,
		),
		'whoops_unauthorized' => array(
			'page callback' => 'dul_system_403',
			'access callback' => TRUE,
		),
		'error/500' => array(
			'page callback' => 'dul_system_500',
			'access callback' => TRUE,
		),
		'whoops_ise' => array(
			'page callback' => 'dul_system_500',
			'access callback' => TRUE,
		),
		'about/staff/netid/%' => array(
			'page callback' => 'dul_system_staff_netid',
			'page arguments' => array(3),
			'file' => 'dul_system.staff.inc',
			'access callback' => TRUE,
		),
		'ext/header' => array(
			'title' => 'Header HTML for external applications',
			'page callback' => 'external_header_html',
			'access callback' => TRUE,
			'type' => MENU_CALLBACK,
			'file' => 'dul_system.external.inc',
		),
	);
}

/**
 * 
 */
function dul_system_menu_link_alter(&$link) {
	kpr('in link alter');
	if ($link['module'] == 'menu') {
		kpr($link);
	}
}

/**
 * Implements hook_url_outbound_alter()
 * 
 * When accessed directly from libcms-xx, change any FQDN references to 'library.duke.edu' to
 * the actual server name
 * 
 */
function dul_system_url_outbound_alter(&$path, &$options, $original_path) {
	if ($options['external']) {
		if (preg_match('/^http:\/\/(|pre\.|dev\.)library.duke.edu/', $path) && !isset($_SERVER['HTTP_X_FORWARDED_HOST'])) {
			$path = preg_replace('/((|pre\.|dev\.)library\.duke\.edu)/', $_SERVER['SERVER_NAME'], $path);
		}
	}
}

/**
 * Implements hook_theme()
 * Defines custom themes here.
 */
function dul_system_theme($existing, $type, $theme, $path) {
	return array(
		'welcome-loggedin' => array(
			'template' => 'welcome-loggedin',
		),
		'welcome-anonymous' => array(
			'template' => 'welcome-anonymous'
		),
		'staff_directory' => array(
			'file' => 'dul_system.staff.inc',
			'variables' => array('top_dept' => NULL, 'reporting_depts' => NULL),
		),
		'staff_dept_address' => array(
			'file' => 'dul_system.staff.inc',
			'variables' => array('dept' => NULL),
		),
		'staff_person' => array(
			'variables' => array('staff_person' => NULL),
			
			// FILE-based
			// the default theme function lives here...
			// Drupal will look for <hook>_staff_person
			'file' => 'dul_system.staff.inc',

			// TEMPLATE
			// Drupal will look for the file 'staff_person.tpl.php'
			// 'template' => 'staff_person',
			// 'path' => $path . '/templates' <--- do this if you want to have a 'templates' folder in your module
		),
		
		'core-services' => array(
			'template' => 'dul_system-core-services',
		),

		'oh-snap' => array(
			'template' => 'oh-snap',
		),
		
		'server_error' => array(
			'template' => 'server_error',
		),
		
		'twitter-datagis' => array(
			'template' => 'twitter-datagis',
		),

		'modal-popup-first-visit' => array(
			'template' => 'modal-popup-first-visit',
		),
	);
}	

/**
 * Generates the 404 response
 */
function dul_system_404() {
	
	// TODO - place this in a admin form element
	drupal_set_title(t("Sorry, Your Page Isn't Here"));
	
	$output = theme('oh-snap', array());
	return $output;
}

/**
 * Generates the HTTP 403 (Forbidden) response
 */
function dul_system_403() {
	drupal_set_title( t('Unauthorized Request') );

	$output = theme('oh-snap');
	return $output;
}

/**
 * Generates the HTTP 50x responses
 */
function dul_system_500() {
	drupal_set_title( t('The server has encountered a problem') );
	
	$output = theme('server_error');
	return $output;
}
/**
 * Implements hook_permission()
 */
function dul_system_permission() {
	return array(
		'administer dul configuration' => array(
			'title' => t('Administer DUL System'),
			'description' => t('Perform administration tasks for Duke Library System module'),
		),
	);
}

/**
 * Implements hook_block_info()
 */
function dul_system_block_info() {
	$blocks['welcome-loggedin'] = array(
		'info' => t('Welcome Greeting to Logged-In Users'),
		'cache' => DRUPAL_CACHE_GLOBAL,
	);
	$blocks['welcome-anonymous'] = array(
		'info' => t('Welcome Greeting to Anonymous Users'),
		'cache' => DRUPAL_CACHE_GLOBAL,
	);
	$blocks['library-alert'] = array(
		'info' => t('Library Alert Message Block'),
		'cache' => DRUPAL_NO_CACHE,
	);
	$blocks['twitter-datagis'] = array(
		'info' => t('Twitter Widget for Data and GIS'),
		'cache' => DRUPAL_NO_CACHE,
	);



	return $blocks;
}

/**
 * Implements hook_block_view()
 */
function dul_system_block_view($delta) {
	$block = array();

	switch ($delta) {
		case 'welcome-loggedin':
			$block['content'] = theme('welcome-loggedin', array());
			break;

		case 'welcome-anonymous':
			$block['content'] = theme('welcome-anonymous', array());
			break;

		case 'library-alert':
			$block['content'] = filter_xss(variable_get('dul_system.alert_message'), '');
			break;
			
		case 'twitter-datagis':
			$block['content'] = theme('twitter-datagis', array());
			break;
	}

	return $block;
}

/**
 * Implements hook_block_configure
 */
function dul_system_block_configure($delta) {
	if ($delta != 'library-alert') {
		return;
	}
	$form['alert_message'] = array(
		'#type' => 'text_format',
		'#title' => t('Alert Message for Home Page'),
		'#description' => t('Enter a descriptive alert message for the home page'),
		'#rows' => 5,
		'#default_value' => variable_get('dul_system.alert_message', ''),
	);

	return $form;
}

/**
 * Implements hook_block_save()
 */
function dul_system_block_save($delta = '', $edit = array()) {
	switch ($delta) {
		case 'library-alert':
			variable_set('dul_system.alert_message', $edit['alert_message']);
			break;
	}

	return;
}

/**
 * Implements hook_block_view_alter for the 'powered-by' system block
 */
function dul_system_block_view_system_powered_by_alter(&$data, $block) {
	watchdog('powered by', print_r($data, TRUE));
}

function dul_system_block_view_alter(&$data, $block) {
	if ($block->module == 'system' && $block->delta == 'powered-by') {
		$data['content'] = t('Powered by Duke University Libraries');
	}
	if ($block->module == 'aggregator') {
		// THIS is not the secure, scalable code, but it'll work for stripping the class off of the <UL> element
		if ($data['subject'] == 'Library News') {
			if (isset($data['content'])) {
				$data['content'] = str_replace(' id="rotate1"', '', $data['content']);
			}
		}
	}
}

/**
 * Implements hook_form_alter for the aggregator-form-feed form
 */
function dul_system_form_aggregator_form_feed_alter(&$form, &$form_state) {
	if (isset($form['fid'])) {
		$variable_key = 'dul_system.aggregator_url_more_link_fid_' . $form['fid']['#value'];
		$form['dul_system'] = array(
			'#type' => 'fieldset',
			'#title' => t('DUL-specific Settings For This Feed'),
			'#description' => t('Settings applicable only to Duke University Libraries'),
			'#collapsible' => TRUE,
			'#collapsed' => FALSE,
			'#tree' => TRUE,
		);
		$form['dul_system']['url_for_more_link'] = array(
			'#type' => 'textfield',
			'#title' => t('URL for the <em>More</em> Link'),
			'#default_value' => variable_get($variable_key, ''),
		);
		$form['#submit'][] = 'dul_system_aggregator_form_submit';
	}
}

function dul_system_aggregator_form_submit($form, &$form_state) {
	if (isset($form_state['values']['url_for_more_link'])) {
		$variable_key = 'dul_system.aggregator_url_more_link_fid_' . $form_state['values']['fid'];
		variable_set($variable_key, $form_state['values']['dul_system']['url_for_more_link']);
	}
}

/**
 * Implements hook_form_alter().
 */
function dul_system_form_alter(&$form, &$form_state, $form_id) {
	if ($form_id == 'shib_auth_custom_data' && isset($form['custom_username'])) {

		// remove the #default_value from the 'custom_username' field,
		// so as not to:
		// 		1) confuse the end-user and 
		//		2) force the end-user to complete the form
		$form['custom_username']['#default_value'] = '';
		$form['custom_username']['#description'] = t('Use the following format -- [firstname] [lastname].');
		$form['custom_username']['#required'] = TRUE;
	}
	// Exit the function if user is not entering "node-based" content
	if (!preg_match('/.+node_form$/', $form_id)) {
		return;
	}
	$node_type = node_type_get_type($form_state['build_info']['args'][0]);
	$acceptable_types = array(
		'library_services_page',
		'search_find_page',
		'research_page',
		'course_support_page',
		'about_page',
		'lilly_library_page',
		'music_library_page',
	);
	//if (in_array($node_type->type, array('library_services_page', 'search_find_page', 'research_page', 'course_support_page', 'about_page'))) {
	if (in_array($node_type->type, $acceptable_types)) {
		if (!isset($form_state['build_info']['args'][0]->nid)) {
			drupal_set_title(t('New Page for "' . trim(preg_replace('/Page$/', '', $node_type->name)) . '"'));
		} else {
			drupal_set_title(t('Editing: ' . check_plain($form_state['build_info']['args'][0]->title)));
		}
	}
}

/**
 * Implements hook_menu_alter().
 */
function dul_system_menu_alter(&$items) {
	if (isset($items['shib_auth/get_custom_data'])) {
		$items['shib_auth/get_custom_data']['title'] = 'Customize Your Library User Name';
	}
	$items['node/add']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
}

/**
 * Implements hook_page_alter()
 */
function dul_system_page_alter(&$page) {
	if (!empty($_SERVER['HTTPS'])) {
		$page['modal_popup']['usermsg'] = array(
			'#theme' => 'modal-popup-first-visit',
			'#attached' => array(
				'js' => array(drupal_get_path('module', 'dul_system') . '/js/modal_popup.js'),
			),
		);
		/*
		$page['modal_popup']['usermsg'] = array(
			'#type' => 'markup',
			'#markup' => '<p>' . t('You have reached the secure version of the Duke University Libaries Website.') . '</p>',
			'#attached' => array(
				'js' => array(drupal_get_path('module', 'dul_system') . '/js/modal_popup.js'),
			)
		);
		*/
	}	
}

/**
 * Implements hook_preprocess()
 *
 * Add a variable named "library_address" that represents 
 * the address stored in the dul_system.footer_address system variable
 */
function dul_system_preprocess(&$variables, $hook) {
	
	$variables['library_address'] = '';
	if ($hook == 'region' && $variables['region'] == 'footer_contact') {
		$variables['library_address'] = variable_get('dul_system.footer_address', '');
	}

	// SETTING THE ENDECA (Catalog Search) URL
	// when detecting the 'megamenu' region, make sure the Endeca URL 
	// points to the staging site.
	// -- 
	// We'll use this variable in the 'madlib' theme's 'region--megamenu.tpl.php' file.
	if ($hook == 'region' && $variables['region'] == 'megamenu') {
		$variables['endeca_url'] = 'http://search.library.duke.edu/';
		if (preg_match('/-pre/', $_SERVER['SERVER_NAME'])) {
			$variables['endeca_url'] = 'http://search.library.duke.edu/duke-pre/';
		}
	}
}

/**
 * Implements hook_cron()
 */
function dul_system_cron() {
	//$xslt = new XSLTProcessor();
	//$content = file_get_contents('http://library.duke.edu/apps/directory/cms/feed.xml');
	#print_r($content);
}

function dul_system_dept_load($dept_id) {
	$q = db_select('dul_dept', 'd');
	$q->fields('d');
	$q->addField('d', 'email', 'dept_email');
	$q->leftJoin('staff', 's', 'd.head_person_id = s.person_id');
	$q->fields('s');
	$q->addField('s', 'email', 'dept_head_email');
	$q->condition('dept_id', $dept_id);
	$res = $q->execute();
	
	$dept = $res->fetchObject();
	$dept->members = array();
	
	$q = db_select('staff', 's');
	$q->join('dul_dept_member', 'm', 'm.person_id = s.person_id');
	$q->fields('s')
		->condition('m.did', $dept_id)
		->orderBy('lastname')
		->orderBy('firstname');
	$res = $q->execute();
	foreach ($res as $member) {
		$dept->members[] = $member;
	}
	
	if (count($dept->members == 0) && $dept->parent_did == 1) {
		$dept->allmembers = array();
		$r = db_select('dul_dept', 'd')
			->fields('d', array('did', 'dept_id'))
			->condition('parent_did', $dept->dept_id)
			->execute();
			
		foreach ($r as $child_dept) {
			$s = db_select('staff', 's');
			$s->join('dul_dept_member', 'dm', 'dm.person_id = s.person_id');
			$s->fields('s');
			$s->condition('dm.did', $child_dept->dept_id);
			$rs = $s->execute();
			foreach ($rs as $staff) {
				$dept->members[] = $staff;
				$dept->allmembers[] = $staff;
			}
		}
	}
	
	return $dept;
}


